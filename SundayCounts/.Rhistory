setwd("Z:/")
pm <- read.csv(file="AW Data for Cwc/AQI PM matched to participants all addresses July.csv", skipNul=TRUE,stringsAsFactors=FALSE)
colnames(pm)
pm2 <- read.csv(file="AQI with ppt all years Jan18 most recent address.csv", skipNul=TRUE,stringsAsFactors=FALSE)
head(pm2)
colnames(pm)
colnames(pm2)
length(unique(pm$MRN))
length(unique(pm2$mrn))
pm$ALT_VISIT_START_DT[c(1:10)]
str(pm$startaddr)
abs(-1)
source('Z:/Mortality Analyses/R code/9.0 - Reduce address for July PM to nearest address v1.R')
max(mins.addr$date_diff)
summary(mins.addr$date_diff)
mins.addr$MRN_DATE_DIFF <- paste(mins.addr$MRN, mins.addr$date_diff)
### subset to "nearest" address for each individual
pm.nearest <- subset(pm, pm$MRN_DATE_DIFF %in% mins.addr$MRN_DATE_DIFF)
vv <- table(pm.nearest$MRN_DATE_DIFF)
sum(vv > 1)
pm.dups <- subset(pm.nearest, MRN %in% names(vv[vv > 1]))
names(vv)[c(1:10)]
pm.dups <- subset(pm.nearest, MRN_DATE_DIFF %in% names(vv[vv > 1]))
head(pm.dups[c("MRN","startaddr")])
pm.nearest <- unique(pm.nearest)
vv <- table(pm.nearest$MRN_DATE_DIFF)
pm.dups <- subset(pm.nearest, MRN %in% names(vv[vv > 1]))
head(pm.dups[c("MRN","startaddr")])
pm.dups <- subset(pm.nearest, MRN_DATE_DIFF %in% names(vv[vv > 1]))
head(pm.dups[c("MRN","startaddr")])
head(pm.dups)
test <- subset(pm, MRN %in% 167729)
test <- subset(pm, MRN %in% "167729")
test <- subset(pm, MRN %in% 10926)
test
write.table(test, file="Z:/AW data for CWC/Possible date_aw error.csv", col.names=TRUE, row.names=FALSE, quote=FALSE, sep=",")
### nearest address date taken as the closest date either before or after the HF diagnosis
pm$date_diff <- as.integer(pm$COMBINE_ADMIT_DT - pm$startaddr)
summary(pm$date_diff)
source('Z:/Mortality Analyses/R code/9.0 - Reduce address for July PM to nearest address v1.R')
length(unique(pm.dups$MRN))
head(pm.dups)
names(pm)
source('Z:/Mortality Analyses/R code/9.0 - Reduce address for July PM to nearest address v1.R')
length(unique(pm.dups$MRN))
source('Z:/Mortality Analyses/R code/9.0 - Reduce address for July PM to nearest address v1.R')
length(unique(pm.dups$MRN))
head(pm.dups)
source('Z:/Mortality Analyses/R code/9.0 - Reduce address for July PM to nearest address v1.R')
head(pm.dups)
source('C:/Users/cavin/Desktop/UBC Data Analytics/UBC_Livestream_Analytics/R_code/Process UBC Livestream v1.R')
source('C:/Users/cavin/Desktop/UBC Data Analytics/UBC_Livestream_Analytics/R_code/Process UBC Livestream v1.R')
files
help(grep)
files.device <- files[grep("Device",files)]
files.source <- files[grep("Source",files)]
files.time <- files[grep("Time",files)]
help("read.csv")
help(strsplit)
vv <- strsplit(x, " ")
vv <- strsplit(files.device, " ")
vv[[1]]
vv <- gsub(vv,"\\.csv","")
vv <- strsplit(files.device, " ")
help(gsub)
vv <- gsub("\\.csv","",vv)
vv[[1]]
vv <- strsplit(files.device, " ")
vv <- gsub("\.csv","",vv)
vv <- gsub("\.csv",,vv)
vv <- gsub("\\.csv",,vv)
vv <- gsub("\\.csv","",vv)
vv[[1]]
length(vv[[1]])
vv <- strsplit(files.device, " ")
length(vv[[1]])
vv <- lapply(gsub("\\.csv",""))
vv <- lapply(vv,gsub("\\.csv",""))
vv <- strsplit(files.device, " ")
vv[[1]][[8]]
vv[[1]][[8]] <- gsub("\\.csv","",vv[[1]][8])
vv[[1]][[8]]
vv[[]][[8]]
vv[[]][8]
vv[[c(1:5)]][8]
vv[[1]]
vv
length(vv)
vv[[1]][8]
tmp.list <- list(length=8)
tmp.list <- list(length=5)
for(l in c(1:length(vv)))
{
n <- length(tmp.list[[l]])
names(tmp.list)[l] <- gsub("\\.csv","",vv[[l]][n])
}
for(l in c(1:length(vv)))
{
n <- length(vv[[l]])
names(tmp.list)[l] <- gsub("\\.csv","",vv[[l]][n])
}
n
gsub("\\.csv","",vv[[l]][n])
names(tmp.list)
tmp.list <- list(length=5)
for(l in c(1:length(vv)))
{
n <- length(vv[[l]])
names(tmp.list)[[l]] <- gsub("\\.csv","",vv[[l]][n])
}
tmp.list
tmp.list <- list(length=5)
tmp.list
tmp.list <- vector("list", length(x))
tmp.list <- vector("list", length(5))
tmp.list
tmp.list <- vector("list", 5)
tmp.list
vv
for(l in c(1:length(vv)))
{
n <- length(vv[[l]])
names(tmp.list)[[l]] <- gsub("\\.csv","",vv[[l]][n])
}
tmp.list
source('C:/Users/cavin/Desktop/UBC Data Analytics/UBC_Livestream_Analytics/R_code/Process UBC Livestream v1.R')
rm(list=ls())
setwd("C:/Users/cavin/Desktop/UBC Data Analytics/UBC_Livestream_Analytics/SundayCounts")
files <- list.files(path=".")
load.analytics <- function(x)
{
tmp.list <- vector("list", length(x)) ## initialize list
vv <- strsplit(x, " ") ## split on spaces
for(l in c(1:length(x)))
{
n <- length(vv[[l]])
names(tmp.list)[[l]] <- gsub("\\.csv","",vv[[l]][n]) ### extract date based on naming convention and assign to list name
tmp.list[[i]] <- read.table(x, header=TRUE, sep=",", stringsAsFactors=FALSE, skip=6 ) ### read in data and assign to list
}
tmp.list
}
files[grep("Device",files)]
list.device <- load.analytics(files[grep("Device",files)])
x = files[grep("Device",files)]
x
tmp.list <- vector("list", length(x)) ## initialize list
vv <- strsplit(x, " ") ## split on spaces
for(l in c(1:length(x)))
{
n <- length(vv[[l]])
names(tmp.list)[[l]] <- gsub("\\.csv","",vv[[l]][n]) ### extract date based on naming convention and assign to list name
tmp.list[[i]] <- read.table(x, header=TRUE, sep=",", stringsAsFactors=FALSE, skip=6 ) ### read in data and assign to list
}
l = 1
n <- length(vv[[l]])
names(tmp.list)[[l]] <- gsub("\\.csv","",vv[[l]][n]) ### extract date based on naming convention and assign to list name
tmp.list[[l]] <- read.table(x, header=TRUE, sep=",", stringsAsFactors=FALSE, skip=6 ) ### read in data and assign to list
tmp.list[[l]] <- read.table(x[l], header=TRUE, sep=",", stringsAsFactors=FALSE, skip=6 ) ### read in data and assign to list
names(tmp.list[[l]])
head(tmp.list[[l]])
names(tmp.list)
source('C:/Users/cavin/Desktop/UBC Data Analytics/UBC_Livestream_Analytics/R_code/Process UBC Livestream v1.R')
str(list.device)
library(ggplot2)
install.packages("plotly")
library(plotly)
USPersonalExpenditure <- data.frame("Categorie" = rownames(USPersonalExpenditure), USPersonalExpenditure)
head(USPersonalExpenditure)
source('C:/Users/cavin/Desktop/UBC Data Analytics/UBC_Livestream_Analytics/R_code/Process UBC Livestream v1.R')
vv <- list.city[[1]]
head(vv)
pie.test <- head(vv)
pie.test
p <- plot_ly(pie.test, labels = ~City, values = ~Users, type = 'pie',
textposition = 'inside',
textinfo = 'label+percent',
insidetextfont = list(color = '#FFFFFF'),
hoverinfo = 'text',
text = ~paste(Users, ' Viewers'),
marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 1)),
#The 'pull' attribute can also be used to create space between the sectors
showlegend = FALSE) %>%
layout(title = 'Livestream viewers by city',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
plot(p)
p
p <- plot_ly(pie.test, labels = ~City, values = ~Users, type = 'pie',
textposition = 'inside',
textinfo = 'label+value',
insidetextfont = list(color = '#FFFFFF'),
hoverinfo = 'text',
text = ~paste(Users, ' Viewers'),
marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 1)),
#The 'pull' attribute can also be used to create space between the sectors
showlegend = FALSE) %>%
layout(title = 'Livestream viewers by city',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
p
p <- plot_ly(pie.test, labels = ~City, values = ~Users, type = 'pie',
textposition = 'inside',
textinfo = 'label+value+percent',
insidetextfont = list(color = '#FFFFFF'),
hoverinfo = 'text',
text = ~paste(Users, ' Viewers'),
marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 1)),
#The 'pull' attribute can also be used to create space between the sectors
showlegend = FALSE) %>%
layout(title = 'Livestream viewers by city',
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
p
par(mfrow=c(1,2))
p
p
plot_ly()
help(head)
pie.test
sub_city <- function(x, min_users=10)
{
for(i in length(x))
{
x[[i]] <- subset(x[[i]], Users >= min_users)
}
x
}
list.city_top <- sub_city(list.city)
str(list.city_top)
sub_city <- function(x, min_users=10)
{
for(i in c(1:length(x)))
{
x[[i]] <- subset(x[[i]], Users >= min_users)
}
x
}
list.city_top <- sub_city(list.city)
str(list.city_top)
city_pie <- function(data)
{
n <- length(data)
tmp.list <- vector("list", length(n)) ## initialize list
for(i in c(1:n))
{
tmp <- data[[i]]
tmp.list[[i]] <- plot_ly(data[[i]], labels = ~City, values = ~Users, type = 'pie',
textposition = 'inside',
textinfo = 'label+value',
insidetextfont = list(color = '#FFFFFF'),
hoverinfo = 'text',
text = ~paste(Users, ' Viewers'),
marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 1)),
#The 'pull' attribute can also be used to create space between the sectors
showlegend = FALSE) %>%
layout(title = paste('Livestream viewers on ',as.date(names(data)[i]),"%Y%m%d"),
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
}
tmp.list
}
pie.plots <- city_pie(list.city_top)
city_pie <- function(data)
{
n <- length(data)
tmp.list <- vector("list", length(n)) ## initialize list
for(i in c(1:n))
{
tmp <- data[[i]]
tmp.list[[i]] <- plot_ly(data[[i]], labels = ~City, values = ~Users, type = 'pie',
textposition = 'inside',
textinfo = 'label+value',
insidetextfont = list(color = '#FFFFFF'),
hoverinfo = 'text',
text = ~paste(Users, ' Viewers'),
marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 1)),
#The 'pull' attribute can also be used to create space between the sectors
showlegend = FALSE) %>%
layout(title = paste('Livestream viewers on ',as.Date(names(data)[i]),"%Y%m%d"),
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
}
tmp.list
}
pie.plots <- city_pie(list.city_top)
city_pie <- function(data)
{
n <- length(data)
tmp.list <- vector("list", length(n)) ## initialize list
for(i in c(1:n))
{
tmp <- data[[i]]
tmp.list[[i]] <- plot_ly(data[[i]], labels = ~City, values = ~Users, type = 'pie',
textposition = 'inside',
textinfo = 'label+value',
insidetextfont = list(color = '#FFFFFF'),
hoverinfo = 'text',
text = ~paste(Users, ' Viewers'),
marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 1)),
#The 'pull' attribute can also be used to create space between the sectors
showlegend = FALSE) %>%
layout(title = paste('Livestream viewers on ',as.Date(names(data)[i],"%Y%m%d")),
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
}
tmp.list
}
pie.plots <- city_pie(list.city_top)
pie.plots[[1]]
list.city_top[[1]]
list.city_top[[1]]$City
sub_city <- function(x, min_users=10)
{
for(i in c(1:length(x)))
{
x[[i]] <- subset(x[[i]], Users >= min_users & City!="")
}
x
}
list.city_top <- sub_city(list.city)
list.city_top[[1]]
pie.plots <- city_pie(list.city_top)
pie.plots[[1]]
city_pie <- function(data)
{
n <- length(data)
tmp.list <- vector("list", length(n)) ## initialize list
for(i in c(1:n))
{
tmp <- data[[i]]
tmp.list[[i]] <- plot_ly(data[[i]], labels = ~City, values = ~Users, type = 'pie',
textposition = 'inside',
textinfo = 'label+value',
insidetextfont = list(color = '#FFFFFF'),
hoverinfo = 'text',
text = ~paste(Users, ' Viewers'),
marker = list(colors = colors,
line = list(color = '#FFFFFF', width = 1)),
#The 'pull' attribute can also be used to create space between the sectors
showlegend = FALSE) %>%
layout(title = paste('Livestream viewers on ', format( as.Date(names(data)[i],"%Y%m%d"), "%b %d %Y") ),
xaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE),
yaxis = list(showgrid = FALSE, zeroline = FALSE, showticklabels = FALSE))
}
tmp.list
}
pie.plots <- city_pie(list.city_top)
pie.plots[[1]]
p <- pie.plots %>%
subplot(nrows = ceiling(length(list.city_top)/3), shareX = TRUE)
p
str(pie.plots)
length(pie.plots)
p <- pie.plots %>%
subplot(nrows = 2, shareX = TRUE)
p
source('C:/Users/cavin/Desktop/UBC Data Analytics/UBC_Livestream_Analytics/R_code/Process UBC Livestream v1.R')
pie.plots[[1]]
png(file= paste0('../Livestream Summary Plots/Livestream viewers on ', format( as.Date(names(data)[i],"%Y%m%d"), "%b %d %Y"), 'v2.png'), height=3, width=3, units="in", res=800)
png(file= paste0('../Livestream Summary Plots/Livestream viewers on v2.png'), height=3, width=3, units="in", res=800)
pie.plots[[1]]
dev.off()
dev.off()
dev.off()
png(file= paste0('../Livestream Summary Plots/Livestream viewers on v2.png'), height=3, width=3, units="in", res=800)
pie.plots[[3]]
dev.off()
install.packages("processx")
library(processx)
help(orca)
source('C:/Users/cavin/Desktop/UBC Data Analytics/UBC_Livestream_Analytics/R_code/Process UBC Livestream v1.R')
source('C:/Users/cavin/Desktop/UBC Data Analytics/UBC_Livestream_Analytics/R_code/Process UBC Livestream v1.R')
source('C:/Users/cavin/Desktop/UBC Data Analytics/UBC_Livestream_Analytics/R_code/Process UBC Livestream v1.R')
source('C:/Users/cavin/Desktop/UBC Data Analytics/UBC_Livestream_Analytics/R_code/Process UBC Livestream v1.R')
